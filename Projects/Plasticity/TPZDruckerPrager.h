/*
 *  TPZDruckerPrager.h
 *  FEMPZ
 *
 *  Created by Diogo Cecilio on 4/5/10.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */

/* Generated by Together */// $Id: TPZDruckerPrager.h,v 1.24 2009-09-24 04:19:52 Diogo Exp $

#ifndef TZPDRUCKERPRAGER_H
#define TZPDRUCKERPRAGER_H

#include "pzlog.h"
#include "TPZPlasticStep.h"
#include "TPZYCDruckerPrager.h"
#include "TPZThermoForceA.h"
#include "TPZElasticResponse.h"
#include "pzvec_extras.h"
#include "pzsave.h"
#include "TPZPlasticStepID.h"

#ifdef LOG4CXX_PLASTICITY
static LoggerPtr loggerDrucker(Logger::getLogger("plasticity.Drucker"));
#endif

#define DRUCKERPARENT TPZPlasticStep<TPZYCDruckerPrager, TPZThermoForceA, TPZElasticResponse>


class TPZDruckerPrager : public DRUCKERPARENT, public TPZSaveable  {
	
public:
	
	enum {NYield = TPZYCDruckerPrager::NYield};
	
public:
	
    TPZDruckerPrager():DRUCKERPARENT(), faPa(0.), fInitialEps()
    {
		fMaterialTensionSign  = 1; // internally in this material tension is negative
		fInterfaceTensionSign =  1; // by default
    }
	
    TPZDruckerPrager(const TPZDruckerPrager & source):DRUCKERPARENT(source)
    {
		faPa		= source.faPa;
		fInitialEps = source.fInitialEps;
    }
	
    TPZDruckerPrager & operator=(const TPZDruckerPrager & source)
    {
		DRUCKERPARENT::operator=(source);
		faPa		= source.faPa;
		fInitialEps = source.fInitialEps;
		
		return *this;
    }
	
	virtual const char * Name() const
	{
		return "TPZDruckerPrager";	
	}
	
    /**
	 SetUp feeds all the parameters necessary to the method, distributing its values
	 inside the aggregation hierarchy and computing the correct initial plasticity 
	 parameter to ensure the irreversibility effect of plastic deformations.
	 Elastic Mudulus:    poisson, M,    lambda
	 Failure Criterion:  a,       m,    neta1
	 Plastic Potential:  ksi2,    mu
	 Hardening Function: C,       p
	 Yield Function:     h,       alpha
	 Atmospheric pression pa - to dimensionalize/adim. the stresses
	 */
	void SetUp()
	{
		
//		DRUCKERPARENT::fYC.SetUp(/*phi=20*/ 20./180. * M_PI ,/*innerMCFit*/0);
//		DRUCKERPARENT::fTFA.SetUp(/*yield- coesao inicial correspondeno a fck igual 32 Mpa */ 9.2376, /*k Modulo de hardening da coesao equivante 1 Mpa a cada 0.1% de deformacao */1000.);
//		DRUCKERPARENT::fER.SetUp(/*young*/ 20000., /*poisson*/ 0.2);
//		DRUCKERPARENT::fYC.SetUp(/*phi=20*/ 20./180. * M_PI ,/*innerMCFit*/0);
//		DRUCKERPARENT::fTFA.SetUp(/*yield- coesao inicial correspondeno a fck igual 32 Mpa */ 9.2376, /*k Modulo de hardening da coesao equivante 1 Mpa a cada 0.1% de deformacao */1000.);
//		DRUCKERPARENT::fER.SetUp(/*young*/ 20000., /*poisson*/ 0.2);
		
//		TPZTensor<REAL> nullSigma,epsA;
//		fInitialEps = DRUCKERPARENT::GetState();
		
	}
	
	REAL YieldRadius(TPZPlasticState<REAL> state)
	{
	
		REAL radius =sqrt(2.)* DRUCKERPARENT::fTFA.Compute(state.Alpha());
		return radius;
	}
	
	virtual void Print(std::ostream & out) const
	{
		out << "\n" << this->Name();
		out << "\n Base Class Data:\n";
		DRUCKERPARENT::Print(out);
		out << "\nTPZDruckerPrager internal members:";
		out << "\n a*Pa = " << faPa;
		out << "\n InitialEps = " << fInitialEps;
		
	}
	
	virtual int ClassId() const
	{
		return TPZDRUCKERPRAGER_ID;	
	}
	
	virtual void Write(TPZStream &buf, int withclassid)
	{
		TPZSaveable::Write(buf, withclassid);
		
		buf. Write(&faPa, 1);	
		buf. Write(&fInitialEps.fEpsT.fData[0], 6);
		buf. Write(&fInitialEps.fEpsP.fData[0], 6);
		buf. Write(&fInitialEps.fAlpha, 1);			
		
		fPlasticMem.Resize(0);
	}
	
	
private:
	
	
    /**
	 * variable related to the stress translation to simulate material cohesion
	 * Already contains dimensional factor
	 */
    REAL faPa;
	
    /**
	 * variable to store the plastic state related to the unstressed state
	 * in a framework of a cohesion material.
	 * Since LadeKim models the cohesion material with the stress axis translated
	 * from a value of a, it is important to keep the related elastic deformation
	 * in this variable to subtract it from the epstotal answers. It is done
	 * because, intuitively, the initially nonstressed state should relate to an
	 * initially undeformed state.
	 */
    TPZPlasticState<REAL> fInitialEps;
	
	
};


#endif //TPZDruckerPrager_H